Why3Formalization:
- deep embedding of Why3's logic language in Coq
- verification of Why3 system (e.g. proving soundness of transformations)
- capability: proving Why3 goals in Coq (it is not the goal)
- embedding:
  * definition of language syntax
    (for types, patterns, terms, formulas, concrete definitions, inductive predicates),
    typing relations and a verified typechecker
  * some language constructions are limited (ADTs without nested types)
  * semantics given by translation to Coq
  * ADTs represented as W types
  * structural recursion translated to a well founded recursion
  * most of the paper - discussion of the translation and its validity proofs
  * my opinion: complicated
    -- 3 layers of abstraction (to make the translations usable),
    -- mixing proofs with functions (in arguments and in return types)
    -- sometimes authors admit they used tactics to define a function
    -- but the authors achieved a usable system for verification of Why3's language constructions
       (by deeply embedding their own proof system with tactics in Coq)

MachCheckUnionFind:
- shallow embedding of OCaml programs (using the CFML tool)
- measures the number of function calls during execution
- measurement: functions consume time credits (similar to a use of fuel)
- used to verify Union-Find

CoqLibVeriRunTimes:
- a library for writing programs in Coq with verified complexity
- a transparent (not included in extracted code) monad for measuring running times
- automatic insertion of running time computation in the code (after running a tool)
- programs written in Coq (may be extracted to OCaml)

